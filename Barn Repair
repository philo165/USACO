#include <iostream>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

struct edge{
    int leftEnd, rightEnd;
    int weight;
    
    bool operator<(const edge e)const{
        return weight > e.weight;
    }      
};

int main(){
    int M, S, C;
    vector<int> occupiedStalls, cuts;
    vector<edge> edges;
    
    cin >> M >> S >> C;
    
    // 記錄編號 
    occupiedStalls.resize(C);
    for (int i = 0; i < C; i++){
        cin >> occupiedStalls[i]; 
    }
    sort(occupiedStalls.begin(), occupiedStalls.end());
    
    // 建立edge 
    edges.resize(C - 1);
    for (int i = 0; i < C - 1; i++){
        edges[i].leftEnd = i;
        edges[i].rightEnd = i + 1;
        edges[i].weight = occupiedStalls[i + 1] - occupiedStalls[i] - 1;    
    }
    
    // 排序edge
    nth_element(edges.begin(), edges.begin() + M - 1, edges.end());
        
    // 計算總數 
    int totalBlocked = occupiedStalls.back() - occupiedStalls[0] + 1;
    for (int i = 0; i < M - 1; i++){
        totalBlocked -= edges[i].weight;    
    }
    
    // 輸出總數 
    cout << totalBlocked << endl;
    
    system("pause");
    return 0;  
} 
